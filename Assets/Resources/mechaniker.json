{
  "emotion": {
    "positiv": "positiv",
    "explain": "explain",
    "neutral": "neutral",
    "sceptic": "sceptic",
    "angry": "angry"
  },
  "level_complete": {
    "stage_1": {
      "text": [
        "Da hast du aber einen schönen Baum gepflanzt.",
        "Wir machen jetzt weiter in Stage 2",
        "",
        "Die Drag'n'Drop-Funktion ist jetzt deaktiviert.",
        "Damit die Maschine richtig arbeitet musst du jetzt oben links in die Textfelder die Regel zur Bildung des Baumes eintragen.",
        "Mit dem \"Prüfen\" Knopf kannst du sehen, ob du richtig liegst.",
        "Schau dir dazu einmal genauer an, wie im Baum der Index eines Elternknotens mit den Indizes seiner Kindknoten zusammenhängt."
      ],
      "emotion": "positiv"
    },
    "stage_2": {
      "text": [
        "Nun müsstest du wissen wie der Algorithmus die Liste als Baum betrachtet.",
        "Wir erreichen jetzt Stage 3",
        "",
        "Nun musst du zuerst den Heap herstellen, das heißt der Baum muss geordnet werden.",
        "Klicke dazu auf eine Verbindung zwischen zwei Kugeln, um diese zu tauschen.",
        "Angefangen wird dabei beim letzten Knoten, in dem die Ordnung noch nicht hergestellt ist.",
        "Durch das kategorische durchlaufen spart man sich unnötiges Tauschen.",
        "Mit dem (x)-Knopf kannst du den Heapstatus des entsprechenden Teilbaumes prüfen.",
        "Hat der gesamte Baum den Heapstatus erreicht, kommst du in die nächste Stufe."
      ],
      "emotion": "positiv"
    },
    "stage_3": {
      "text": [
        "Weiter gehts zu Stage 4",
        "",
        "Wenn in Stufe 4 nun der Heap im ganzen Baum hergestellt wurde, solltest du noch einmal den \"Prüfen\" Knopf drücken.",
        "Dann wird das erste und das letzte Element im Baum getauscht und danach das letzte Element in die sortierte Liste übertragen."
      ],
      "emotion": "positiv"
    },
    "stage_4": {
      "text": [ "So langsam hast du den Sortieralgorithmus verstanden, oder?" ],
      "emotion": "positiv"
    }
  },
  "random_mistake": {
    "text": [
      "Wenn du weiter so machst werden wir beide noch gefeuert.",
      "Wenn du so weiter machst wirst du es nie verstehen!",
      "Versuche es einfach noch einmal!"
    ],
    "emotion": "angry"
  },
  "random_success": {
    "text": [
      "Super das ist ja fast wie meine eigene Arbeit.",
      "Das hätte ich nicht besser machen können.",
      "Wenn du so weiter machst kannst du bald an meiner Stelle stehen.",
      "Du hast das ausgezeichnet gemacht."
    ],
    "emotion": "positiv"
  },
  "level_hints": {
    "stage_1": {
      "text": [
        "Fülle den Baum von oben nach unten mit den Kugeln!",
        "Orientiere dich an der vorgegebenen Liste.",
        "Du kannst die Ziffer an dem Loch als index der Kugel in der Liste ansehen, ziehe nun die Kugeln in das Passende Loch."
      ],
      "emotion": "explain"
    },
    "stage_2": {
      "text": [
        "Jede Ebene hat doppelt so viele Knote wie die vorherige.",
        "Die Indizes werden von der Wurzel bis zu den untersten Blättern, zeilenweise und aufsteigend vergeben.",
        "Beim Nächsten Tipp Gebe ich dir die Bildungsvorschrift vor",
        "2*n +1 2*n+2"
      ],
      "emotion": "explain"
    },
    "stage_3": {
      "text": [
        "Achte darauf, dass die Kindknoten nicht größer als der Elternknoten sind.",
        "Am Ende muss das größte Element die Wurzel sein.",
        "Prüfe ob die Herstellung eines Heaps zwischen zwei Elementen einen anderen zerstört hat.",
        "Den gesamten Baum so zu ordnen das das Größte Element oben steht nennt man Maxheap im gegenzug heißt ein geordneter Baum mit dem Kleinsten   Element oben Minheap.",
        "Benutzt den Prüfen Knopf um den Kompleten Baum zu Prüfen.",
        "Achte darauf das alle Knöpfe ein Häckchen haben."
      ],
      "emotion": "explain"
    },
    "stage_4": {
      "text": [
        "Tausche doch die Wurzel mit dem untersten Blatt.",
        "Das unterste Blatt ist am weitesten von der Wurzel entfernt.",
        "Wenn du dir sicher bist das alles richtig ist, dann überprüfe es doch einfach mit dem Button."
      ],
      "emotion": "explain"
    }
  },
  "reaction_from_3": {
    "heap_destroy": {
      "text": [
        "Das habe ich wohl vergessen dir zu sagen:",
        "Nach einem Tausch gibt es keine Garantie dafür, dass Kindknoten noch Heapstatus haben.",
        "Überprüfe diese Knoten erneut und mache dann weiter."
      ],
      "emotion": "explain"
    },
    "not_last_subtree": {
      "text": [
        "Hast du etwa vergessen, was ich dir gesagt habe?",
        "Es wird immer beim letzten Knoten der noch nicht im Heap ist getauscht."
      ],
      "emotion": "explain"
    },
    "change_little_one": {
      "text": [
        "Sollten wir nicht lieber die schwerere Kugel hochtauschen?",
        "Glaub mir, damit sparst du dir noch einen Haufen Arbeit!"
      ],
      "emotion": "explain"
    },
    "first_change": {
      "text": [
        "Jetzt musst du den Baum ja schon wieder ordnen.",
        "Aber siehst du auch was ich sehe?",
        "Dadurch, dass nur ein Element nicht geordnet ist, lässt sich die Ordnung sehr schnell wiederherstellen.",
        "Probiere es mal aus!"
      ],
      "emotion": "explain"
    },
    "reason_why_efficient": {
      "text": [
        "Genau so wird's gemacht.",
        "Wenn du weiterhin immer die schwerere Kugel der beiden Kindknoten hochtauschst, wirst du nie mehr als dreimal pro Heapify tauschen.",
        "Das ist auch der Grund, weshalb Heapsort so effizient ist."
      ],
      "emotion": "explain"
    }
  },
  "stage1_intro": {
    "text": [
      "Hier ein paar Hinweise zur ersten Stufe",
      "Benutze deine Mause um Kugeln per Drag'n'Drop-Funktion in den Baum zu bewegen.",
      "Arbeite dabei die Liste von oben nach unten ab.",
      "Ziehe die Kugeln der Reihe nach immer zum höchsten Loch, welches am weitesten links steht.",
      "Achte dabei auf die kleinen Nummern an den Löchern. Sie helfen dir dabei den Überblick zu bewaren.",
      "Viel Spaß bei der ersten Stage."
    ],
    "emotion": "explain"
  },
  "stage4_outro": {
    "text": [
      "Du warst ein aufmerksamer und wissbegieriger Lehrling und ich wünsche dir viel Erfolg bei der Anwendung deiner erlernten Fähigkeiten.",
      "Lass mich dir noch ein paar zusätzliche Informationen zu HeapSort geben die vielleicht einmal hilfreich werden könnten.",
      "Einer der großen Vorteile von HeapSort ist der überaus geringe Speicheraufwand, da es sich hierbei um eine in-place Sortierung handelt.",
      "In-place bedeutet dabei, dass der Algorithmus außer den zu bearbeitenden Daten nur eine, von der Datenmenge unabhängigen, Konstante als Speicher benötigt.",
      "Der zweite Vorteil ist die logarithmische Maximallaufzeit des Algorithmus von \nO(n * log n).",
      "Ein Nachteil ist allerding, dass der Algorithmus instabil sortiert, also die gleiche Reihenfolge von gleichwertigen Elementen bevor und nach der Sortierung nicht gewährleistet ist.",
      "Somit ist HeapSort immer dann eine gute Wahl, wenn man eine zeitlich zuverlässige Sortierung mit möglichst geringem Speicheraufwand haben möchte und die Reihenfolge gleichwertiger Elemente irrelevant ist."
    ],
    "emotion": "explain"
  },
  "falsch": {
    "text": [ "Wenn du nicht weiter weißt hilft vielleicht ein Tipp!" ],
    "emotion": "angry"
  }
}
