using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

public class Checkpoint : MonoBehaviour
{
    // Start is called before the first frame update
    //public static List<Checkpoint> checkpoints = new List<Checkpoint>();
    //public static Checkpoint[,] checkpoints = new Checkpoint[4, 31];
    private static Checkpoint Instance;
    
    //if true checkpoitns already creared
    //delete
    public static bool used = false;
    public static Dictionary<Globals.Stage, List<Checkpoint>> checkpoints = new Dictionary<Globals.Stage, List<Checkpoint>>();

    //if checkpoint is placed in unity editor (if gets generated by script set this true)
    public bool dynamicPlaced = false;

    public enum CheckpointType
    {
        MOVE, TELEPORT
    }

    //in editor created checkpoints gets id set. In sorting id is preferred and holeid is secondary
    public int Id;
    public int holeID = 0;

    public CheckpointType type;
    public Globals.Stage stage;

    //checkpoint to teleport to
    public GameObject checkpointTeleport;

    //if checkpoint is over a hole then the hole get saved here
    public Hole overHole;

    private void Awake()
    {
        if (!Instance)
        {
            initList();
            Instance = this;
        }
    }

    void Start()
    {
        if (stage == null) Debug.LogError("Ceckpoint[" + Id.ToString() + "]: Stage not set!");
        //dynamic placed and dont have to be added
        if (stage == Globals.Stage.NONE) return;
        checkpoints[stage].Add(this);

        //if (!checkpoints[stage, Id]) checkpoints[stage, Id] = this;
        //checkpointcount++;
        //checkpoints.Add(this)
    }

    void setCheckpoint (GameObject gameObject)
    {
        transform.position = gameObject.transform.position;
    }

    //inits the list with stages
    private static void initList()
    {
        foreach(Globals.Stage s in Enum.GetValues(typeof(Globals.Stage)))
        {
            checkpoints.Add(s, new List<Checkpoint>());
        }
    }
}
